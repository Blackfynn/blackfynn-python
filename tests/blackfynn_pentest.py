from __future__ import print_function
from blackfynn import Blackfynn

# Derived class from BlackFynn for containing methods used during the
# pentest that BlackFynn can decide if they want to migrate to the
# main Blackfynn object or leave here just for testing purposes


class BlackfynnPentest(Blackfynn):
    def __init__(self, *args, **kwargs):
        super(BlackfynnPentest, self).__init__(*args, **kwargs)

    # User API wrappers
    def get_user(self):
        """
        Get the current user.

        Args:
            None

        Returns:
            Object of type/subtype ``User``.
        """
        try:
            return self._api.user.get()
        except:
            self._logger.info("Unable to retrieve current user")

    def user_set_two_factor(self, phone_number, country_code):
        """
        Set two-factor authentication on the current user.

        Args:
            phone_number: The user's phone number
            country_code: The user's country code

        Returns:
            None.
        """
        try:
            return self._api.user.set_two_factor(phone_number, country_code)
        except:
            self._logger.info("Unable to set two factor credentials for user")

    def user_delete_two_factor(self):
        """
        Delete two-factor authentication on the current user.

        Args:
            None:

        Returns:
            None.
        """
        try:
            return self._api.user.delete_two_factor()
        except:
            self._logger.info("Unable to delete two factor credentials for user")

    def user_set_orcid(self, orcid):
        """
        Set orcid on the current user.

        Args:
            orcid: The user's orcid

        Returns:
            None.
        """
        try:
            return self._api.user.set_orcid(orcid)
        except:
            self._logger.info("Unable to set orcid for user")

    def user_delete_orcid(self):
        """
        Delete orcid on the current user.

        Args:
            None:

        Returns:
            None.
        """
        try:
            return self._api.user.delete_orcid()
        except:
            self._logger.info("Unable to delete orcid for user")

    def user_update(self, organization, email, url, color, last_name, first_name, credential):
        try:
            return self._api.user.update(organization, email, url, color, last_name, first_name, credential)
        except:
            self._logger.info("Unable to update user")

    def user_custom_terms_of_service(self, version):
        try:
            return self._api.user.custom_terms_of_service(version)
        except:
            self._logger.info("Unable to set user accepted terms of service version")

    def blackfynn_terms_of_service(self, version):
        try:
            return self._api.user.blackfynn_terms_of_service(version)
        except:
            self._logger.info("Unable to set Blackfynn terms of service version")

    # Organizations API Wrappers
    def get_organizations_all(self):
        try:
            return self._api.organizations.get_all()
        except:
            self._logger.info("Unable to get all organizations")

    def get_organization(self, id):
        try:
            return self._api.organizations.get(id)
        except:
            self._logger.info("Unable to get organization by org id")

    def update_organization(self, org):
        try:
            return self._api.organizations.update(org)
        except Exception as error:
            self._logger.info("Unable to update organization %s" % org.id)

    def get_organization_custom_terms_of_service(self, org):
        try:
            return self._api.organizations.get_custom_terms_of_service(org)
        except Exception as error:
            self._logger.info("Unable to get custom terms of service for org id %s" % id)


    # Organizations / Team API Wrappers
    def get_teams(self, org):
        try:
            return self._api.organizations.get_teams(org)
        except Exception as error:
            self._logger.info("Unable to get organization teams")

    def get_team(self, org, team_id):
        try:
            return self._api.organizations.get_team(org, team_id)
        except Exception as error:
            self._logger.info("Unable to get organization team id %s" % team_id)

    def create_team(self, org, team_name):
        try:
            return self._api.organizations.create_team(org, team_name)
        except Exception as error:
            self._logger.info("Unable to create team %s for organization %s", (team_name, org.name))

    def update_team(self, org, team_id, team_name):
        try:
            return self._api.organizations.update_team(org, team_id, team_name)
        except Exception as error:
            self._logger.info("Unable to create team %s for organization %s", (team_id, org.name))

    def delete_team(self, org, team_id):
        try:
            return self._api.organizations.delete_team(org, team_id)
        except Exception as error:
            self._logger.info("Unable to create team %s for organization %s", (team_id, org.name))

    def get_team_members(self, org, team_id):
        try:
            return self._api.organizations.get_team_members(org, team_id)
        except Exception as error:
            self._logger.info("Unable to get organization team id %s members" % team_id)

    def get_members(self, org):
        try:
            return self._api.organizations.get_members(org)
        except Exception as error:
            self._logger.info("Unable to get organization members")

    # Organizations / Invites Wrappers
    def get_invites(self, org):
        try:
            return self._api.organizations.get_invites(org)
        except Exception as error:
            self._logger.info("Unable to get organization invites")

    def refresh_invite(self, org, invite_id):
        try:
            return self._api.organizations.refresh_invite(org, invite_id)
        except Exception as error:
            self._logger.info("Unable to refresh invite id %s for organization" % invite_id)

    def delete_invite(self, org, invite_id):
        try:
            return self._api.organizations.delete_invite(org, invite_id)
        except Exception as error:
            self._logger.info("Unable to delete invite id %s for organization" % invite_id)

    # Datasets
    def lock_dataset(self, ds):
        try:
            return self._api.datasets.lock(ds)
        except Exception as error:
            self._logger.info("Unable to get lock dataset %s" % ds.name)

    def unlock_dataset(self, ds):
        try:
            return self._api.datasets.unlock(ds)
        except Exception as error:
            self._logger.info("Unable to get unlock dataset %s" % ds.name)

    def islocked_dataset(self, ds):
        try:
            return self._api.datasets.is_locked(ds)
        except Exception as error:
            self._logger.info("Unable to get unlock dataset %s" % ds.name)

    def get_readme_dataset(self, ds):
        try:
            return self._api.datasets.get_readme(ds)
        except Exception as error:
            self._logger.info("Unable to get readme for dataset %s" % ds.name)

    def update_readme_dataset(self, ds, readme):
        try:
            return self._api.datasets.update_readme(ds, readme)
        except Exception as error:
            self._logger.info("Unable to update readme for dataset %s" % ds.name)

    def delete_dataset(self, ds):
        try:
            return self._api.datasets.delete(ds)
        except Exception as error:
            self._logger.info("Unable to get delete dataset %s" % ds.name)

    # Tokens
    # Can't implement as of now... not enough privileges

    # Security
    def get_upload_credentials(self, ds):
        try:
            ds_id = ds.id
            return self._api.security.get_upload_credentials(ds_id)
        except Exception as error:
            self._logger.info("Unable to get upload credentials for the current user")

    # get_streaming_credentials (broken)
    def get_upload_credentials(self, ds):
        try:
            ds_id = ds.id
            return self._api.security.get_streaming_credentials()
        except Exception as error:
            self._logger.info("Unable to get streaming credentials for the current user")

    # Packages
    def get_all_packages(self, ds):
        try:
            all_packages = []
            ds_id = ds.id
            resp = self._api.datasets.get_all_packages(ds_id)
            if "packages" in resp and len(resp["packages"]) > 0:
                packages_resp = resp["packages"]
                for package in packages_resp:
                    pkg = self._api.packages._get_package_from_data(package)
                    all_packages.append(pkg)

            return all_packages
        except Exception as error:
            self._logger.info("Unable to get all packages for the dataset %s" % ds.name)

    def get_files_from_package(self, pkg):
        try:
            files = self._api.packages.get_files(pkg)
        except Exception as error:
            self._logger.info("Unable to get all files for the package %s" % pkg.name)

    def get_package_file_s3_url(self, pkg, file_id):
        # Doc Sewell, Alpine Security
        # This function cannot be written because the node_id doesn't exist in the Package
        # object, and that is what the URL requires
        raise Exception("Function not implemented.")
        pass